FUNCTION_BLOCK FuzzyMsPacMan

VAR_INPUT
	BLINKY_distance : REAL;
	PINKY_distance : REAL;
	INKY_distance : REAL;
	SUE_distance : REAL;
	
	BLINKY_edibleDistance: REAL;
	PINKY_edibleDistance: REAL;
	INKY_edibleDistance: REAL;
	SUE_edibleDistance: REAL;
	
	BLINKY_confidence : REAL;
	PINKY_confidence : REAL;
	INKY_confidence : REAL;
	SUE_confidence : REAL;
END_VAR

VAR_OUTPUT
	runAwayBLINKY: REAL;
	runAwayPINKY: REAL;
	runAwayINKY: REAL;
	runAwaySUE: REAL;
	
	goToPPill: REAL;
	
	eatBLINKY: REAL;
	eatPINKY: REAL;
	eatINKY: REAL;
	eatSUE: REAL;
END_VAR

FUZZIFY BLINKY_distance
	TERM near := (0, 1) (50, 0);
	TERM medium := gauss 75 25;
	TERM far := (100, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY PINKY_distance
	TERM near := (0, 1) (50, 0);
	TERM medium := gauss 75 25;
	TERM far := (100, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY INKY_distance
	TERM near := (0, 1) (50, 0);
	TERM medium := gauss 75 25;
	TERM far := (100, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY SUE_distance
	TERM near := (0, 1) (50, 0);
	TERM medium := gauss 75 25;
	TERM far := (100, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY BLINKY_edibleDistance
	TERM near := (0, 1) (50, 0);
	TERM medium := gauss 75 25;
	TERM far := (100, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY PINKY_edibleDistance
	TERM near := (0, 1) (50, 0);
	TERM medium := gauss 75 25;
	TERM far := (100, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY INKY_edibleDistance
	TERM near := (0, 1) (50, 0);
	TERM medium := gauss 75 25;
	TERM far := (100, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY SUE_edibleDistance
	TERM near := (0, 1) (50, 0);
	TERM medium := gauss 75 25;
	TERM far := (100, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY BLINKY_confidence
	TERM low := (0, 1) (2, 0);
	TERM medium := gauss 1 1;
	TERM high := (0, 0) (2, 1);
END_FUZZIFY

FUZZIFY PINKY_confidence
	TERM low := (0, 1) (2, 0);
	TERM medium := gauss 1 1;
	TERM high := (0, 0) (2, 1);
END_FUZZIFY

FUZZIFY INKY_confidence
	TERM low := (0, 1) (2, 0);
	TERM medium := gauss 1 1;
	TERM high := (0, 0) (2, 1);
END_FUZZIFY

FUZZIFY SUE_confidence
	TERM low := (0, 1) (2, 0);
	TERM medium := gauss 1 1;
	TERM high := (0, 0) (2, 1);
END_FUZZIFY

DEFUZZIFY runAwayBLINKY			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)	
END_DEFUZZIFY

DEFUZZIFY runAwayPINKY			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)	
END_DEFUZZIFY

DEFUZZIFY runAwayINKY			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)	
END_DEFUZZIFY

DEFUZZIFY runAwaySUE			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)	
END_DEFUZZIFY

DEFUZZIFY goToPPill			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY eatBLINKY			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)	
END_DEFUZZIFY

DEFUZZIFY eatPINKY			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)	
END_DEFUZZIFY

DEFUZZIFY eatINKY			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)	
END_DEFUZZIFY

DEFUZZIFY eatSUE			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)	
END_DEFUZZIFY

RULEBLOCK MsPacManRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	//_____________________________________________________________________________________________
	
	//RUN AWAY & GOTOPPILL
	
	RULE 1 : IF ((BLINKY_distance IS near) AND (BLINKY_confidence IS high)) THEN runAwayBLINKY IS emergency;
	RULE 2 : IF ((BLINKY_distance IS near) AND (BLINKY_confidence IS medium)) THEN runAwayBLINKY IS emergency;
	RULE 3 : IF ((BLINKY_distance IS near) AND (BLINKY_confidence IS low)) THEN runAwayBLINKY IS nervious;
	RULE 4 : IF ((BLINKY_distance IS medium) AND (BLINKY_confidence IS high)) THEN goToPPill IS emergency;
	RULE 5 : IF ((BLINKY_distance IS medium) AND (BLINKY_confidence IS medium)) THEN goToPPill is nervious;
	RULE 6 : IF ((BLINKY_distance IS medium) AND (BLINKY_confidence IS low)) THEN runAwayBLINKY IS calm;
	RULE 7 : IF ((BLINKY_distance IS far) AND (BLINKY_confidence IS high)) THEN runAwayBLINKY IS calm;
	RULE 8 : IF ((BLINKY_distance IS far) AND (BLINKY_confidence IS medium)) THEN runAwayBLINKY IS calm;
	RULE 9 : IF ((BLINKY_distance IS far) AND (BLINKY_confidence IS low)) THEN runAwayBLINKY IS calm;
	
	RULE 10 : IF ((PINKY_distance IS near) AND (PINKY_confidence IS high)) THEN runAwayPINKY IS emergency;
	RULE 11 : IF ((PINKY_distance IS near) AND (PINKY_confidence IS medium)) THEN runAwayPINKY IS emergency;
	RULE 12 : IF ((PINKY_distance IS near) AND (PINKY_confidence IS low)) THEN runAwayPINKY IS nervious;
	RULE 13 : IF ((PINKY_distance IS medium) AND (PINKY_confidence IS high)) THEN goToPPill IS emergency;
	RULE 14 : IF ((PINKY_distance IS medium) AND (PINKY_confidence IS medium)) THEN goToPPill is nervious;
	RULE 15 : IF ((PINKY_distance IS medium) AND (PINKY_confidence IS low)) THEN runAwayPINKY IS calm;
	RULE 16 : IF ((PINKY_distance IS far) AND (PINKY_confidence IS high)) THEN runAwayPINKY IS calm;
	RULE 17 : IF ((PINKY_distance IS far) AND (PINKY_confidence IS medium)) THEN runAwayPINKY IS calm;
	RULE 18 : IF ((PINKY_distance IS far) AND (PINKY_confidence IS low)) THEN runAwayPINKY IS calm;
	
	RULE 19 : IF ((INKY_distance IS near) AND (INKY_confidence IS high)) THEN runAwayINKY IS emergency;
	RULE 20 : IF ((INKY_distance IS near) AND (INKY_confidence IS medium)) THEN runAwayINKY IS emergency;
	RULE 21 : IF ((INKY_distance IS near) AND (INKY_confidence IS low)) THEN runAwayINKY IS nervious;
	RULE 22 : IF ((INKY_distance IS medium) AND (INKY_confidence IS high)) THEN goToPPill IS emergency;
	RULE 23 : IF ((INKY_distance IS medium) AND (INKY_confidence IS medium)) THEN goToPPill is nervious;
	RULE 24 : IF ((INKY_distance IS medium) AND (INKY_confidence IS low)) THEN runAwayINKY IS calm;
	RULE 25 : IF ((INKY_distance IS far) AND (INKY_confidence IS high)) THEN runAwayINKY IS calm;
	RULE 26 : IF ((INKY_distance IS far) AND (INKY_confidence IS medium)) THEN runAwayINKY IS calm;
	RULE 27 : IF ((INKY_distance IS far) AND (INKY_confidence IS low)) THEN runAwayINKY IS calm;
	
	RULE 28 : IF ((SUE_distance IS near) AND (SUE_confidence IS high)) THEN runAwaySUE IS emergency;
	RULE 29 : IF ((SUE_distance IS near) AND (SUE_confidence IS medium)) THEN runAwaySUE IS emergency;
	RULE 30 : IF ((SUE_distance IS near) AND (SUE_confidence IS low)) THEN runAwaySUE IS nervious;
	RULE 31 : IF ((SUE_distance IS medium) AND (SUE_confidence IS high)) THEN goToPPill IS emergency;
	RULE 32 : IF ((SUE_distance IS medium) AND (SUE_confidence IS medium)) THEN goToPPill is nervious;
	RULE 33 : IF ((SUE_distance IS medium) AND (SUE_confidence IS low)) THEN runAwaySUE IS calm;
	RULE 34 : IF ((SUE_distance IS far) AND (SUE_confidence IS high)) THEN runAwaySUE IS calm;
	RULE 35 : IF ((SUE_distance IS far) AND (SUE_confidence IS medium)) THEN runAwaySUE IS calm;
	RULE 36 : IF ((SUE_distance IS far) AND (SUE_confidence IS low)) THEN runAwaySUE IS calm;
	
	//EAT
	
	RULE 37 : IF ((BLINKY_edibleDistance IS near) AND (BLINKY_confidence IS high)) THEN eatBLINKY IS emergency;
	RULE 38 : IF ((BLINKY_edibleDistance IS near) AND (BLINKY_confidence IS medium)) THEN eatBLINKY IS emergency;
	RULE 39 : IF ((BLINKY_edibleDistance IS near) AND (BLINKY_confidence IS low)) THEN eatBLINKY IS nervious;
	RULE 40 : IF ((BLINKY_edibleDistance IS medium) AND (BLINKY_confidence IS high)) THEN eatBLINKY IS emergency;
	RULE 41 : IF ((BLINKY_edibleDistance IS medium) AND (BLINKY_confidence IS medium)) THEN eatBLINKY is nervious;
	RULE 42 : IF ((BLINKY_edibleDistance IS medium) AND (BLINKY_confidence IS low)) THEN eatBLINKY IS calm;
	RULE 43 : IF ((BLINKY_edibleDistance IS far) AND (BLINKY_confidence IS high)) THEN eatBLINKY IS calm;
	RULE 44 : IF ((BLINKY_edibleDistance IS far) AND (BLINKY_confidence IS medium)) THEN eatBLINKY IS calm;
	RULE 45 : IF ((BLINKY_edibleDistance IS far) AND (BLINKY_confidence IS low)) THEN eatBLINKY IS calm;
	
	RULE 46 : IF ((PINKY_edibleDistance IS near) AND (PINKY_confidence IS high)) THEN eatPINKY IS emergency;
	RULE 47 : IF ((PINKY_edibleDistance IS near) AND (PINKY_confidence IS medium)) THEN eatPINKY IS emergency;
	RULE 48 : IF ((PINKY_edibleDistance IS near) AND (PINKY_confidence IS low)) THEN eatPINKY IS nervious;
	RULE 49 : IF ((PINKY_edibleDistance IS medium) AND (PINKY_confidence IS high)) THEN eatPINKY IS emergency;
	RULE 50 : IF ((PINKY_edibleDistance IS medium) AND (PINKY_confidence IS medium)) THEN eatPINKY is nervious;
	RULE 51 : IF ((PINKY_edibleDistance IS medium) AND (PINKY_confidence IS low)) THEN eatPINKY IS calm;
	RULE 52 : IF ((PINKY_edibleDistance IS far) AND (PINKY_confidence IS high)) THEN eatPINKY IS calm;
	RULE 53 : IF ((PINKY_edibleDistance IS far) AND (PINKY_confidence IS medium)) THEN eatPINKY IS calm;
	RULE 54 : IF ((PINKY_edibleDistance IS far) AND (PINKY_confidence IS low)) THEN eatPINKY IS calm;
	
	RULE 55 : IF ((INKY_edibleDistance IS near) AND (INKY_confidence IS high)) THEN eatINKY IS emergency;
	RULE 56 : IF ((INKY_edibleDistance IS near) AND (INKY_confidence IS medium)) THEN eatINKY IS emergency;
	RULE 57 : IF ((INKY_edibleDistance IS near) AND (INKY_confidence IS low)) THEN eatINKY IS nervious;
	RULE 58 : IF ((INKY_edibleDistance IS medium) AND (INKY_confidence IS high)) THEN eatINKY IS emergency;
	RULE 59 : IF ((INKY_edibleDistance IS medium) AND (INKY_confidence IS medium)) THEN eatINKY is nervious;
	RULE 60 : IF ((INKY_edibleDistance IS medium) AND (INKY_confidence IS low)) THEN eatINKY IS calm;
	RULE 61 : IF ((INKY_edibleDistance IS far) AND (INKY_confidence IS high)) THEN eatINKY IS calm;
	RULE 62 : IF ((INKY_edibleDistance IS far) AND (INKY_confidence IS medium)) THEN eatINKY IS calm;
	RULE 63 : IF ((INKY_edibleDistance IS far) AND (INKY_confidence IS low)) THEN eatINKY IS calm;
	
	RULE 64 : IF ((SUE_edibleDistance IS near) AND (SUE_confidence IS high)) THEN eatSUE IS emergency;
	RULE 65 : IF ((SUE_edibleDistance IS near) AND (SUE_confidence IS medium)) THEN eatSUE IS emergency;
	RULE 66 : IF ((SUE_edibleDistance IS near) AND (SUE_confidence IS low)) THEN eatSUE IS nervious;
	RULE 67 : IF ((SUE_edibleDistance IS medium) AND (SUE_confidence IS high)) THEN eatSUE IS emergency;
	RULE 68 : IF ((SUE_edibleDistance IS medium) AND (SUE_confidence IS medium)) THEN eatSUE is nervious;
	RULE 69 : IF ((SUE_edibleDistance IS medium) AND (SUE_confidence IS low)) THEN eatSUE IS calm;
	RULE 70 : IF ((SUE_edibleDistance IS far) AND (SUE_confidence IS high)) THEN eatSUE IS calm;
	RULE 71 : IF ((SUE_edibleDistance IS far) AND (SUE_confidence IS medium)) THEN eatSUE IS calm;
	RULE 72 : IF ((SUE_edibleDistance IS far) AND (SUE_confidence IS low)) THEN eatSUE IS calm;

END_RULEBLOCK
END_FUNCTION_BLOCK